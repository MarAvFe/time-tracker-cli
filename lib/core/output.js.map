{"version":3,"sources":["../../src/core/output.js"],"names":["sumarize","search","tasks","rate","full","format","table","head","colAligns","chars","style","total","forEach","task","index","duration","getSeconds","description","name","push","getStartDate","rowSpan","content","red","vAlign","console","log","toString","outputConfig","config","Object","keys","map","e","outputVertical","args","table2","key","splice","cliError","err","error","cliSuccess","green"],"mappings":"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","file":"output.js","sourcesContent":["import moment from 'moment'\nimport Table from 'cli-table2'\nimport colors from 'colors'\n\nimport { humanParseDiff, calcRate } from './utils'\n\nexport const sumarize = function(search, tasks, rate, full, format) {\n    let table = new Table({\n        head: ['Duration', 'Dates', 'Task'],\n        colAligns: ['right', 'center', 'left'],\n        chars: {\n            'top': '═'\n            , 'top-mid': '╤'\n            , 'top-left': '╔'\n            , 'top-right': '╗'\n            , 'bottom': '═'\n            , 'bottom-mid': '╧'\n            , 'bottom-left': '╚'\n            , 'bottom-right': '╝'\n            , 'left': '║'\n            , 'left-mid': '╟'\n            , 'right': '║'\n            , 'right-mid': '╢'\n          },\n        style: { head: ['green'] }\n    });\n    let total = 0\n    let head= `Search: ${search} \\n`\n\n    tasks.forEach((task, index) => {\n        task = task.task\n\n        let duration = task.getSeconds()\n        total += duration\n\n        let description = (task.description() && task.description() !== '')\n            ? task.description()\n            : task.name\n\n        table.push([description, moment(task.getStartDate()).format(format), humanParseDiff(duration)])\n    })\n\n    if (full){\n        table.push([])\n        table.push(\n            [{ rowSpan:2, content: `${colors.red('Search:')} \"${search}\"`, vAlign:'center'}, colors.red('Total time'), humanParseDiff(total)]\n        )\n\n        if (rate){\n            table.push([ colors.red('Rate'), calcRate(rate, total)])\n        }\n    }\n\n    console.log(table.toString());\n}\n\nexport const outputConfig = function (config){\n    let table = new Table({\n        head: ['Key', 'value'],\n        chars: {\n            'top': '═'\n            , 'top-mid': '╤'\n            , 'top-left': '╔'\n            , 'top-right': '╗'\n            , 'bottom': '═'\n            , 'bottom-mid': '╧'\n            , 'bottom-left': '╚'\n            , 'bottom-right': '╝'\n            , 'left': '║'\n            , 'left-mid': '╟'\n            , 'right': '║'\n            , 'right-mid': '╢'\n        },\n        colAligns: ['center', 'center'],\n        style: { head: ['green'] }\n    });\n\n    Object.keys(config).map(e => table.push([e, config[e]]))\n\n    console.log(table.toString());\n}\n\nexport const outputVertical = function (...args){\n    let table2 = new Table()\n        let key = args.splice(0, 1)\n        table2.push(\n            { [key]: args },\n        )\n\n        return table2.toString()\n}\n\nexport const cliError = function(err) {\n    console.error(colors.red(`Error: ${err}`))\n}\n\nexport const cliSuccess = function(err) {\n    console.log(colors.green(err))\n}\n"]}